# from collections import deque
# class Solution:
#     def maxSubarraySumCircular(self, nums: List[int]) -> int:
#         n= len(nums)
#         nums = nums+nums
#         if len(nums)==1:
#             return nums[0]
#         res = nums[0]
#         maxEnding = nums[0]
#         temp_arr= deque([nums[0]])
#         for i in range(1, len(nums)):
#             if len(temp_arr)>=n:
#                 temp_arr.popleft()
#             while len(temp_arr)>0 and sum(temp_arr)<(sum(temp_arr)-temp_arr[0]):
#                 temp_arr.popleft()
#             if (sum(temp_arr) + nums[i])>nums[i]:
#                 maxEnding = sum(temp_arr) + nums[i]
#                 temp_arr.append(nums[i])
#             else:
#                 temp_arr = deque([nums[i]])
#                 maxEnding = nums[i]
#             print(temp_arr)
#         # Update res if maximum subarray sum ending at index i > res
#             res = max(res, maxEnding)
#         return res

class Solution:
    def maxSubarraySumCircular(self, nums: List[int]) -> int:
        if len(nums)==1:
            return nums[0]
        max_sum = float('-inf')
        min_sum = float('inf')
        maxEnding = 0
        minEnding = 0
        total_sum=0
        for i in range(len(nums)):
            maxEnding = max(maxEnding + nums[i], nums[i])
            max_sum = max(max_sum, maxEnding)

            minEnding = min(minEnding + nums[i], nums[i])
            min_sum = min (min_sum, minEnding)
            total_sum += nums[i]
        return max_sum if total_sum == min_sum else max(max_sum, total_sum-min_sum)
