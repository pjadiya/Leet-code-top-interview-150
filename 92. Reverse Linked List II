# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head: Optional[ListNode], left: int, right: int) -> Optional[ListNode]:
        if left==right or not head :
            return head
        # stack method 
        # stack =[]
        dummy_node = ListNode(0,head)
        prev = dummy_node
        for i in range(left-1):
            prev=prev.next
        cur = prev.next
        # for i in range(right-left+1):
        #     stack.append(cur)
        #     cur=cur.next
        # while stack:
        #     new_node= stack.pop()
        #     prev.next = new_node
        #     prev=prev.next
        # prev.next = cur
        # # method 2 
        for i in range(right-left):
            nxt = cur.next
            cur.next = nxt.next
            nxt.next= prev.next
            prev.next = nxt
        return dummy_node.next

   


        

      
