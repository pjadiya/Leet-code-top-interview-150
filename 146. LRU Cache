class Node:
    def __init__(self, val,key, prev=None, next=None):
        self.val =val
        self.key=key
        self.prev= prev
        self.next= next

class LRUCache:

    def __init__(self, capacity: int):
        self.capacity=capacity
        self.left=Node(0,0)
        self.right=Node(0,0)
        self.left.next, self.right.prev=self.right, self.left
        self.cache={}

    # insert to the right most
    def insert(self,node):
        prev,nxt=self.right.prev , self.right
        prev.next=nxt.prev=node
        node.prev,node.next=prev,nxt
        

    def remove(self, node):
        prev=node.prev
        nxt=node.next
        prev.next=nxt
        nxt.prev=prev

    def get(self, key: int) -> int:
        if key in self.cache:
            node= self.cache[key]
            self.remove(node)
            self.insert(node)
            return node.val
        return -1

    def put(self, key: int, value: int) -> None:
        if key in self.cache:
            node= self.cache[key]
            self.remove(node)
        node=Node(val=value,key=key)
        self.cache[key]=node
        self.insert(node)
        if len(self.cache)>self.capacity:
            lru = self.left.next
            self.remove(lru)
            self.cache.pop(lru.key)
        


# Your LRUCache object will be instantiated and called as such:
# obj = LRUCache(capacity)
# param_1 = obj.get(key)
# obj.put(key,value)
