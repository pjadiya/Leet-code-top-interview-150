# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def list_size(self,root):
        count=0
        while root:
            root=root.next
            count+=1
        return count
        
    def reverseKGroup(self, head: Optional[ListNode], k: int) -> Optional[ListNode]:
        n= self.list_size(head)
        if n<k:
            return head
        dummy = ListNode()
        dummy.next=head
        prev=dummy
        nxt=dummy.next
        s=dummy
        for j in range(n//k):
            i=1
            while i<=k:
                cur=nxt
                nxt=cur.next
                cur.next=prev
                prev=cur
                i+=1
            l=s.next
            s.next=cur
            l.next=nxt
            s=l
        return dummy.next
                
