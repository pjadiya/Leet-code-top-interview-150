from collections import deque

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        """
        find all the 0s on the edges and push it in the queue
        create a visited array with all zerores
        visit all the elements in the queue and its surrounding elements
        mark all the elements as X if that element is zero in the visited array
        """
        n = len(board)
        m = len(board[0])
        q = deque()
        visited = [[0 for i in range(m)] for j in range(n)]
        for i in range(n):
            if board[i][0]=="O":
                visited[i][0]=1
                q.append((i,0))
            if board[i][m-1]=="O":
                visited[i][m-1]=1
                q.append((i,m-1))
        for j in range(m):
            if board[0][j]=="O":
                visited[0][j]=1
                q.append((0,j))
            if board[n-1][j]=="O":
                visited[n-1][j]=1
                q.append((n-1,j))
        while q:
            temp = q.popleft()
            r= temp[0]
            c= temp[1]
            row = [1,0,-1,0]
            col = [0,-1,0,1]
            for i in range(4):
                nr= r+ row[i]
                nc= c+ col[i]
                condition = (nr>0 and nr<n) and(nc>0 and nc<m) and (visited[nr][nc]==0) and (board[nr][nc]=="O")
                if condition:
                    visited[nr][nc]=1
                    q.append((nr,nc))
        for i in range(n):
            for j in range(m):
                if visited[i][j]==0 and board[i][j]=='O':
                    board[i][j]="X"
        return
