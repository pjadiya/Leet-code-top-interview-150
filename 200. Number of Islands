class Solution:
    def __init__(self):
        self.visited=None
        self.row=0
        self.col=0

    # checks if row and columns are in range and value is 1 and is not visited cell
    def isSafe(self,i,j,grid): 
        if (i<self.row and i>=0) and (j<self.col and j>=0) and grid[i][j]=="1" and self.visited[i][j]==False:
            return True
        else:
            return False

    # runs DFS and checks all the adjacent cells
    def DFS(self,i,j,grid):

        cols=[-1,0 ,0 ,1]
        rows=[0 ,1 ,-1,0]

        self.visited[i][j]=True
        for k in range(4):
            if self.isSafe(i+rows[k],j+cols[k],grid):
                self.DFS(i+rows[k],j+cols[k],grid)
        return

    def numIslands(self, grid: List[List[str]]) -> int:
        self.row= len(grid)
        self.col= len(grid[0])

        self.visited= [[False for j in range(self.col)] for i in range(self.row)]

        count=0
        for i in range(self.row):
            for j in range(self.col):
                if self.visited[i][j]==False and grid[i][j]=="1":
                    self.DFS(i,j,grid)
                    count+=1

        return count
        
